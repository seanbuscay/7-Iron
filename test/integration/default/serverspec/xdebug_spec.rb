# 7-Iron Xdebug Test
# Verify Xdebug is installed and ready to use.
#
# BACKLOG: Expand test for real use case.
#
# Copyright 2015 Sean P. Buscay
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

require 'serverspec'
require 'spec_helper'

set :backend, :exec

describe '7-Iron Xdebug Test' do

  context 'from Apache -' do
    describe command('lynx -dump -dont_wrap_pre http://localhost/info.php | grep xdebug') do
      its(:stdout) { should include 'xdebug support  enabled' }
      its(:stdout) { should include 'xdebug.profiler_enable               Off               Off' }
      its(:stdout) { should include 'xdebug.profiler_enable_trigger       On                On' }
      its(:stdout) { should include 'xdebug.remote_connect_back           On                On' }
      its(:stdout) { should include 'xdebug.remote_enable                 On                On' }
      its(:stdout) { should include 'xdebug.remote_handler                dbgp              dbgp' }
      its(:stdout) { should include 'xdebug.remote_port                   9000              9000' }
      its(:stdout) { should include 'xdebug.show_exception_trace          Off               Off' }
    end
    describe command('lynx -dump -dont_wrap_pre http://localhost/info.php | grep Xdebug') do
      its(:stdout) { should include 'with Xdebug v2.' }
    end
  end

  # Keep this test because the file is autogenerated by chef from attributes.
  describe file('/etc/php5/apache2/conf.d/xdebug.ini') do
    it { should be_file }
    xconf = <<-conf
xdebug.profiler_enable = 0
xdebug.profiler_enable_trigger = 1
xdebug.remote_connect_back = 1
xdebug.remote_enable = 1
xdebug.remote_handler = dbgp
xdebug.remote_port = 9000
xdebug.show_exception_trace = 0
    conf
    its(:content) { should end_with xconf }
  end

end
